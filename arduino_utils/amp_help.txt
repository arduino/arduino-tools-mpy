enable_amp():
  Enable support for Arduino MicroPython Projects (AMP)\n

disable_amp():
  Disable support for AMP\n

create_project('{project name}', set_default = False, hidden = False):
  Creates a project with the given name. No special characters allowed. Spaces will be converted to '_'
  Setting the project as default will make it run at boot/reset.
  Making the project hidden will prevent its listing.
  Useful for launchers and other management utilities not to be messed with.

delete_project([force_confirm = 'n']):
  Deletes the project with the given name.
  If force_confirm is set to 'Y' no confirmation will be required to delete the whole tree.

hide_project('{project name}'):
  Will set the project to hidden

unhide_project('{project name}'):
  Will set the project to visible

list_projects(return_list = False):
  Lists all the projects on the board.
  If return_list is True, an Array will be returned.

default_project():
  Displays the project currently set as default (if any)

default_project('{project name}', fall_back = None):
  If project name is '' (empty string), no default will be set.
  If fall_back is set (and is a valid project), at the next reset/boot that will become the default project to run.

backup_project('{project name}'):
  Creates a .tar archive of the project with the given name if valid.
  The archive file will be named appending a timestamp to the project name.
  The archive will be saved in '/amp_backups/filename_timestamp.tar'

expand_project('{archive path}'):
  Expands the .tar archive into a project folder. Requires confirmation if project exists.

delete_folder('{folder path}', [force_confirm = 'n']):
  Will attempt to delete the folder and all its content recursively.
  If force_confirm is set to True it will not ask for confirmation at each file/folder.

list_tree('{folder path}'):
  [helper] Will recursively list through the path specified, indicationg if the item is a directory (d:) or a file (f:)

fs_root():
  [helper] Will change the current directory to root ('/')

read_file('{file path}'):
 Will read the content of the file and output it to REPL
