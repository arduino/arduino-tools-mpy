enable_apps():
  Enable support for Arduino MicroPython Apps.

disable_apps():
  Disable support for Arduino MicroPython Apps.

create_app('{app name}', friendly_name = '{friendly_name}', set_default = False, hidden = False):
  Creates an app with the given name. No special characters allowed. Spaces will be converted to '_'
  Setting the app as default will make it run at boot/reset.
  Making the app hidden will prevent its listing.
  Useful for launchers and other management utilities not to be messed with.

delete_app('{app_name}', force_confirm = False):
  Deletes the app with the given name.
  If force_confirm is set to 'Y' no confirmation will be required to delete the whole tree.

hide_app('{app name}'):
  Will set the app to hidden.

unhide_app('{app name}'):
  Will set the app to visible.

list_apps(return_list = False, include_hidden = False): [REPL/interactive]
  Interactively list apps in REPL unless return_list is True.
  Hidden apps are excluded by default.

get_apps_list(include_hidden = False)
  Returns an Array of apps and some basic info:
  Path, name, default, hidden.
  Hidden apps are excluded by default.

default_app(app name = '', fall_back = None):
  If app name is '' (empty string) or not passed at all, no default will be set.
  If fall_back is set (and is a valid app based on name), at the next reset/boot that will become the default app to run.
  When no parameter is passed, the function returns the current default app or `None`

export_app('{app name}') - requires `tarfile-write` to be installed:
  Creates a .tar archive of the app with the given name if valid.
  The archive file will be named appending a timestamp to the app's name.
  The archive will be saved in '/__ampexports/filename.tar'

import_app('{archive path}', force_overwrite = False):
  Expands the .tar archive into a app folder.
  Requires confirmation if app exists unless force_overwrite is True.

delete_folder('{folder path}', [force_confirm = False]):
  Will attempt to delete the folder and all its content recursively.
  If force_confirm is set to True it will not ask for confirmation at each file/folder.

read_file('{file path}'):
 Will read the content of the file and output it to REPL

--- WiFi Utilities ---

auto_connect(progress_callback = None):
  Automatically connects to known networks. Returns True on success.
  Optional progress_callback function for connection updates.

connect(ssid = None, key = None, interface = None, timeout = 10, display_progress = False, progress_callback = None):
  Connect to WiFi network. If no params provided, tries auto_connect then interactive mode.
  Returns network interface on success, None on failure.

connect_to_network(id = None):
  Interactive WiFi connection. Lists available networks if no id provided.
  Prompts for password and saves credentials on successful connection.

wifi_scan(force_scan = False):
  Scans for available WiFi networks. Uses cache unless force_scan=True.
  Returns list of network tuples (ssid, mac, channel, rssi, security, hidden).

list_networks(rescan = False):
  Lists available WiFi networks with formatted output.
  Rescans if rescan=True.

print_scan_results():
  Pretty prints all scanned networks (or stored one if within `_NETWORK_CACHE_LIFE`)

get_network_qrcode_string(ssid, password, security):
  Returns QR code string for WiFi network sharing.

print_network_details(interface = _net_if):
  Prints network connection details (IP, MAC, gateway, etc.).
  `interface` defaults to `_net_if` which is `None` when not initialised.

--- Access Point Mode ---

init_ap(ssid, key):
  Initializes device as WiFi Access Point with given credentials.

get_ap_settings():
  retrieves Access Point configuration


--- File System Helpers ---

fs_root():
  Changes current directory to filesystem root ('/').

fs_getpath():
  Returns current working directory path.

print_directory(path = '.'):
  Prints formatted directory tree structure.

get_directory_tree(path = '.', order = -1):
  Returns directory tree as list of tuples (depth, path, name, is_folder).

is_directory(path):
  Returns True if path is a directory, False if file.

--- Console Utilities ---

show_cursor(show = True):
  Show or hide terminal cursor.

clear_terminal(cursor_visible = True):
  Clear terminal screen and optionally set cursor visibility.

show_commands():
  Display this help text in terminal.

--- Hash Utilities ---

get_hash(file_path):
  Calculate SHA256 hash of file content.
